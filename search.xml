<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java in a nutshell(7th Edition)</title>
    <url>/2019/11/16/Java-in-a-nutshell-7th-Edition/</url>
    <content><![CDATA[<p><img src="/images/java_in_a_nutshell.png" alt="alt"> </p>
<h1 id="Java中的面向对象设计"><a href="#Java中的面向对象设计" class="headerlink" title="Java中的面向对象设计"></a>Java中的面向对象设计</h1><h2 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h2><p>目前本书中我们遇到的“顶级”类型有:类，接口和枚举。也就是说他们是相互独立定义，直接存在java包中的。然而，类型也可以定义在其他类型内部。这些被称为“嵌套”类型，也是我们熟知的“内部类”，是Java语言的一个重要特征。</p>
<p>通常情况下，嵌套类型有两个使用场景，但是都和封装有关。第一，一个类型需要拥有另外一个类型的完全访问权限时，则可以定义为嵌套类型。嵌套类对外部类的成员和方法有完全的访问权限，包括私有成员。嵌套类有特殊的访问权限，可以认为“轻微的破坏了封装规则”。</p>
<p>另外一个使用嵌套类型的场景是一个类型需要和另外一个类型绑定在一起。也即他们没有必要作为一个类单独存在。</p>
<p>或者是，一个类由于特殊的原因以及小范围的使用。这意味着应该局部化，因为它实际上是实现细节的一部分。</p>
<p>在Java以前的版本，唯一的方法用匿名实现一个接口来实现第二个场景的嵌套类。实际上，随着Java8的到来，匿名类正在被lambda表达式所取代，尽管在某些场景依然需要使用。</p>
<p>嵌套类有四种使用方法：</p>
<p>静态成员类型</p>
<p>​        静态成员类型即包含static关键字定义的成员类型。嵌套接口，枚举和注解默认静态（即使没有使用static关键字）</p>
<p>非静态成员类型</p>
<p>​        没有被声明为static的成员类型就是非静态成员类型。只有类才能是“非静态成员类型”。</p>
<p>局部类</p>
<p>​       局部类是一个定义局部代码块中的类，可见性也只在代码块中（比如定义在方法中）。接口，枚举和注解都不能被定义为局部的。</p>
<p>匿名类</p>
<p>​       在Java语言中匿名类就是没有名字的局部类。接口，枚举和注解不能定义成匿名的。</p>
<p>尽管最准确的叫法是“嵌套类”，但是大部分开发者称之为“内部类”。根据不同的使用场景，除了静态成员类型，非静态成员类，局部类或者是匿名类，他们之间本有本质区别。</p>
<p>幸运的是，尽管关于嵌套类准确的描述不是很清楚，但是嵌套类的语法还是很明确的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                                         注意</span><br><span class="line">在Java 11之前，使用编译技巧来实现嵌套类型。 经验丰富的Java程序员应注意，</span><br><span class="line">此细节实际上已在Java 11中进行了更改，并且不再按照与以前相同的方式进行过更改。</span><br></pre></td></tr></table></figure>

<p>让我们继续详细描述四种嵌套类型中的每一种。 每个部分均描述了嵌套类型的功能，使用限制，以及与该类型一起使用的任何特殊Java语法。</p>
<h3 id="静态成员类型"><a href="#静态成员类型" class="headerlink" title="静态成员类型"></a>静态成员类型</h3><p>一个静态成员类型更像一个常规的顶级类型。方便起见，它被嵌套在另一个类型的命名空间内。静态成员类型有一下基本特点：</p>
<ul>
<li>一个静态成员类型类似于外部类的其他静态成员：静态字段和静态方法。</li>
<li>静态成员类型和外部类类实例没有关联(也就是没有this对象)</li>
<li>一个静态成员类型仅仅只能访问外部类的其他静态成员。</li>
<li>一个静态成员类型可以访问外部类的所有的静态成员（包括其他静态(嵌套)成员类型）</li>
<li>嵌套接口，枚举和注解默认是静态，不管有没有static关键字。</li>
<li>任何嵌套在接口或者是枚举内的类型也都是默认静态的。</li>
<li>静态成员类型可以定义在顶级类型内部或者是嵌套在其他静态类型的任何深度。</li>
<li>一个静态类型不能被定义在其他任何非嵌套类型中。</li>
</ul>
<p>让我们看一下静态成员类型的语法示例。例子4-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A class that implements a stack as a linked list </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedStack</span> </span>&#123;</span><br><span class="line">    <span class="comment">// This static member interface defines how objects are linked </span></span><br><span class="line">    <span class="comment">// The static keyword is optional: all nested interfaces are static   </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">Linkable</span> </span>&#123;         </span><br><span class="line">    	<span class="function"><span class="keyword">public</span> Linkable <span class="title">getNext</span><span class="params">()</span>;         </span></span><br><span class="line"><span class="function">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Linkable node)</span>;     </span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    <span class="comment">// The head of the list is a Linkable object   </span></span></span><br><span class="line"><span class="function">    Linkable head;</span></span><br><span class="line"><span class="function">    <span class="comment">// Method bodies omitted    </span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Linkable node)</span> </span>&#123; ... &#125;    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123; ... &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// This class implements the static member interface </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkableInteger</span> <span class="keyword">implements</span> <span class="title">LinkedStack</span>.<span class="title">Linkable</span> </span>&#123; </span><br><span class="line">    <span class="comment">// Here's the node's data and constructor  </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkableInteger</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="keyword">this</span>.i = i; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Here are the data and methods required to implement the interface</span></span><br><span class="line">    </span><br><span class="line">    LinkedStack.Linkable next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> LinkedStack.<span class="function">Linkable <span class="title">getNext</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> next; &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(LinkedStack.Linkable node)</span> </span>&#123; next = node; &#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
